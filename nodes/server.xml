<?xml version="1.0" standalone="no"?>

<kickstart interface="public">

	<description>
	The 'server node' in the graph.

	This file is used as a connection point for other XML
	configuration nodes.
	</description>

        <copyright>
        Copyright (c) 2000 - 2014 The Regents of the University of California.
        All rights reserved. Rocks(r) 6.2 www.rocksclusters.org
        
        </copyright>


<package>roll-base-usersguide</package>
<package>rocks-developersguide</package>
<package>foundation-python-sphinx</package>
<package>rocks-config-server</package>
<package>rocks-admin</package>
<package>firefox</package>
<package>pdsh</package>
<!-- needed bacause eclipse rpm in the java roll provides libcairo -->
<package arch="x86_64">cairo.x86_64</package>


<post>

<!-- On servers, turn off auto reinstall -->
/sbin/chkconfig rocks-grub off

</post>


<!-- default configuration for firefox -->
<post>

<file name="/tmp/all-rocks.js" perms="0444">
pref("app.update.auto", false);
pref("app.update.enabled", false);
pref("app.update.autoInstallEnabled", false);
pref("browser.backspace_action",            2);
pref("browser.display.use_system_colors",   true);
pref("browser.link.open_external",          3);
pref("browser.shell.checkDefaultBrowser",   false);
pref("general.smoothScroll",                true);
pref("intl.locale.matchOS", true);
pref("browser.startup.homepage", "http://127.0.0.1/");
</file>

rm -f /usr/lib/firefox-*/defaults/preferences/all-redhat.js
mv /tmp/all-rocks.js /usr/lib/firefox-*/defaults/preferences/

</post>

<post>

<file name="/etc/rc.d/rocksconfig.d/post-90-num-cpus" perms="755">
#!/bin/bash
#
# set the correct number of CPUs for the frontend on each boot
#
/opt/rocks/bin/rocks set host cpus localhost \
	`grep 'processor' /proc/cpuinfo | wc -l`
</file>

<file name="/etc/rc.d/rocksconfig.d/post-91-attr-cleanup" perms="755">
#!/bin/bash
#
# Remove some attributes in the database that may cause issues kickstarting
# other types of nodes 
#
/opt/rocks/bin/rocks remove attr membership 
/opt/rocks/bin/rocks remove attr appliance 
/bin/rm /etc/rc.d/rocksconfig.d/post-91-attr-cleanup
</file>
</post>

<post>
<!-- optionally set the airboss attribute -->

AIRBOSS=`/bin/cat /proc/cmdline | /bin/awk \
	'BEGIN {RS="[[:space:]]"; FS="="} /airboss/{print $2}'`

if [ "$AIRBOSS" != "" ]
then
	/opt/rocks/bin/rocks add host attr localhost airboss $AIRBOSS
fi

</post>


<post>

<!--
	all rolls added to a running frontend will be added 'on the fly', so
	set the roll_install_on_the_fly ottribute to true.

	'shadow=yes' means that root and apache can access this attribute,
	but it will not show up in 'rocks dump' so it won't pollute the
	restore roll.
-->

<file name="/etc/rc.d/rocksconfig.d/post-02-on-the-fly" perms="755">
/opt/rocks/bin/rocks set host attr localhost roll_install_on_the_fly true \
	shadow=yes
</file>

rm -f /etc/rc.d/rocksconfig.d/post-02-on-the-fly
</post>

<!--
	Set max allowable "rocks sync host"
	parallel instances to 64. This is modifiable
	over the running of the cluster.
-->
<post>
/opt/rocks/bin/rocks add host attr localhost \
	max_parallel_proc 64
</post>

<post>
<file name="/etc/rc.d/rocksconfig.d/post-50-cluster-ssh-keys" perms="700">
#!/bin/bash
#
# create cluster-wide rsa and dsa keys 
# Put them in the rocks secure attribute database
# Record the frontend's rsa/dsa keys, too
#
MOUNTPOINT=/mnt/priv
if [ ! -d $MOUNTPOINT ]; then mkdir $MOUNTPOINT; fi
mount -t ramfs -o size=1m ramfs $MOUNTPOINT
RNDPW=$(/usr/bin/openssl rand -base64 32)
chmod 700 $MOUNTPOINT
CIPHERS=("rsa" "dsa" "ecdsa" "ed25519")
declare -A CIPHERARGS
CIPHERARGS["rsa"]="-b 2048"
CIPHERARGS["dsa"]="-b 1024"
CIPHERARGS["ecdsa"]="-b 521"
CIPHERARGS["ed25519"]="-b 1024"
COMMONARGS="-q -C '&hostname;-cluster-key'" 
# generate the keyfiles 
for cipher in ${CIPHERS[*]}; do
	KEYNAME=${MOUNTPOINT}/ssh_host_${cipher}_key
	for file in ${KEYNAME}*; do 
		if [ -f $file ]; then
			/bin/rm -f $file 
		fi 
	done
	/usr/bin/ssh-keygen ${CIPHERARGS[$cipher]} -N '' ${COMMONARGS} -t ${cipher} -f  ${KEYNAME}
	/usr/bin/chmod 0400 ${KEYNAME} 
done

# The following will fail if the key is already there, that's OK!
for cipher in ${CIPHERS[*]}; do
	KEYNAME=ssh_host_${cipher}_key
	/opt/rocks/bin/rocks add sec_attr $KEYNAME value=${MOUNTPOINT}/${KEYNAME} crypted=true 
	/opt/rocks/bin/rocks add sec_attr $KEYNAME.pub value=${MOUNTPOINT}/${KEYNAME}.pub crypted=true 
done
/bin/umount $MOUNTPOINT

# Now add the frontend's specific Host keys, if already there, that's OK
MOUNTPOINT=/etc/ssh
for cipher in ${CIPHERS[*]}; do
	KEYNAME=ssh_host_${cipher}_key
	/bin/chmod go-rw ${MOUNTPOINT}/${KEYNAME}
	/opt/rocks/bin/rocks add host sec_attr &hostname; attr=$KEYNAME value=${MOUNTPOINT}/${KEYNAME} crypted=true 
	/opt/rocks/bin/rocks add host sec_attr &hostname; attr=${KEYNAME}.pub value=${MOUNTPOINT}/${KEYNAME}.pub crypted=true 
done

# now generate the /etc/ssh/ssh_known_hosts file
/opt/rocks/bin/rocks sync config

# Run this script  only once
/bin/rm -f /etc/rc.d/rocksconfig.d/post-50-cluster-ssh-keys

</file>
</post>
</kickstart> 
